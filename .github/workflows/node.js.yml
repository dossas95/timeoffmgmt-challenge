# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
    paths:
      - application/*
  pull_request:
    branches: [ "main" ]
    

jobs:
  build-app:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./application
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js v19.4.0
      uses: actions/setup-node@v3
      with:
        node-version: 19.4.0
        cache: 'npm'
    - run: npm install
    - run: npm run build --if-present
    - run: node node_modules/mocha/bin/mocha --recursive t/unit

  build-docker:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./application
    steps:
    - uses: actions/checkout@v3
    - name: gcloud auth
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.KEY }}'
    - name: Set Up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'
    - name: Build Docker image
      run: |
        export IMAGE="us.gcr.io/gorilla-time-management-app/time-management-app"
        export NEW_VERSION=$(jq -r '.version' < package.json)
        export EXISTENCE=$(gcloud container images list-tags $IMAGE --filter="tags:$NEW_VERSION")
        if [[ $EXISTENCE != "" ]]; then
          echo "Error: This image version is already stored in the registry"
        else 
          docker build -t $IMAGE:$NEW_VERSION .
          docker push $IMAGE
        fi
